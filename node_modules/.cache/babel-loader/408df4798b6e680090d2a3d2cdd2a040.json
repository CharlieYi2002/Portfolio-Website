{"ast":null,"code":"var _jsxFileName = \"/Users/charlieyi/Desktop/ITP_404/Final_Project/src/Statistics.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./styles.css\";\nexport default function Statistics() {\n  const [entries, setEntries] = useState([]);\n  const [winnerPercentages, setWinnerPercentages] = useState([]);\n  const [mostFrequentWinners, setMostFrequentWinners] = useState([]);\n  useEffect(() => {\n    document.title = \"Statistics\";\n  }, []);\n  useEffect(() => {\n    // fetch existing entries when the component mounts\n    fetchEntries();\n    console.log(\"Fetching existing entries in statistics\");\n  }, []);\n  useEffect(() => {\n    // recalculate percentages and most frequent winners whenever entries change in the log\n    calculateWinnerStatistics();\n    console.log(\"Updating winner statistics\");\n  }, [entries]);\n  const fetchEntries = async () => {\n    try {\n      const response = await fetch(\"http://localhost:3003/logWinner\");\n      const data = await response.json();\n      setEntries(data.reverse());\n    } catch (error) {\n      console.error(\"Error fetching entries:\", error);\n    }\n  };\n  const calculateWinnerStatistics = () => {\n    const winnerCounts = {};\n    const mostFrequentWinnersMap = {};\n    entries.forEach(entry => {\n      // Calculate winner percentages\n      winnerCounts[entry.winner] = (winnerCounts[entry.winner] || 0) + 1;\n\n      // Calculate most frequent winners for each game\n      if (!mostFrequentWinnersMap[entry.game]) {\n        mostFrequentWinnersMap[entry.game] = {};\n      }\n      mostFrequentWinnersMap[entry.game][entry.winner] = (mostFrequentWinnersMap[entry.game][entry.winner] || 0) + 1;\n    });\n    const totalEntries = entries.length;\n    const percentages = Object.keys(winnerCounts).map(winner => ({\n      winner,\n      percentage: winnerCounts[winner] / totalEntries * 100\n    }));\n    setWinnerPercentages(percentages);\n    const mostFrequentWinnersArray = Object.keys(mostFrequentWinnersMap).map(game => {\n      const winnersCount = mostFrequentWinnersMap[game];\n      const mostFrequentWinner = Object.keys(winnersCount).reduce((prevWinner, currentWinner) => winnersCount[currentWinner] > winnersCount[prevWinner] ? currentWinner : prevWinner, Object.keys(winnersCount)[0]);\n      return {\n        game,\n        mostFrequentWinner\n      };\n    });\n    setMostFrequentWinners(mostFrequentWinnersArray);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, \"Statistics\"), entries.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, \"Winners:\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, entries.map(entry => /*#__PURE__*/React.createElement(\"li\", {\n    key: entry.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  }, entry.winner, \" - \", entry.game, \" - \", entry.date)))), winnerPercentages.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, \"Winners' Percentages:\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, winnerPercentages.map(item => /*#__PURE__*/React.createElement(\"li\", {\n    key: item.winner,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  }, item.winner, \": \", item.percentage.toFixed(2), \"%\")))), mostFrequentWinners.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, \"Most Frequent Winners for Each Game:\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, mostFrequentWinners.map(item => /*#__PURE__*/React.createElement(\"li\", {\n    key: item.game,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  }, item.game, \": \", item.mostFrequentWinner))))));\n}","map":{"version":3,"names":["React","useState","useEffect","Statistics","entries","setEntries","winnerPercentages","setWinnerPercentages","mostFrequentWinners","setMostFrequentWinners","document","title","fetchEntries","console","log","calculateWinnerStatistics","response","fetch","data","json","reverse","error","winnerCounts","mostFrequentWinnersMap","forEach","entry","winner","game","totalEntries","length","percentages","Object","keys","map","percentage","mostFrequentWinnersArray","winnersCount","mostFrequentWinner","reduce","prevWinner","currentWinner","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","key","id","date","item","toFixed"],"sources":["/Users/charlieyi/Desktop/ITP_404/Final_Project/src/Statistics.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./styles.css\";\n\nexport default function Statistics() {\n  const [entries, setEntries] = useState([]);\n  const [winnerPercentages, setWinnerPercentages] = useState([]);\n  const [mostFrequentWinners, setMostFrequentWinners] = useState([]);\n\n  useEffect(() => {\n    document.title = \"Statistics\";\n  }, []);\n\n  useEffect(() => {\n    // fetch existing entries when the component mounts\n    fetchEntries();\n    console.log(\"Fetching existing entries in statistics\");\n  }, []);\n\n  useEffect(() => {\n    // recalculate percentages and most frequent winners whenever entries change in the log\n    calculateWinnerStatistics();\n    console.log(\"Updating winner statistics\");\n  }, [entries]);\n\n  const fetchEntries = async () => {\n    try {\n      const response = await fetch(\"http://localhost:3003/logWinner\");\n      const data = await response.json();\n      setEntries(data.reverse());\n    } catch (error) {\n      console.error(\"Error fetching entries:\", error);\n    }\n  };\n\n  const calculateWinnerStatistics = () => {\n    const winnerCounts = {};\n    const mostFrequentWinnersMap = {};\n\n    entries.forEach((entry) => {\n      // Calculate winner percentages\n      winnerCounts[entry.winner] = (winnerCounts[entry.winner] || 0) + 1;\n\n      // Calculate most frequent winners for each game\n      if (!mostFrequentWinnersMap[entry.game]) {\n        mostFrequentWinnersMap[entry.game] = {};\n      }\n\n      mostFrequentWinnersMap[entry.game][entry.winner] =\n        (mostFrequentWinnersMap[entry.game][entry.winner] || 0) + 1;\n    });\n\n    const totalEntries = entries.length;\n\n    const percentages = Object.keys(winnerCounts).map((winner) => ({\n      winner,\n      percentage: (winnerCounts[winner] / totalEntries) * 100,\n    }));\n\n    setWinnerPercentages(percentages);\n\n    const mostFrequentWinnersArray = Object.keys(mostFrequentWinnersMap).map(\n      (game) => {\n        const winnersCount = mostFrequentWinnersMap[game];\n        const mostFrequentWinner = Object.keys(winnersCount).reduce(\n          (prevWinner, currentWinner) =>\n            winnersCount[currentWinner] > winnersCount[prevWinner]\n              ? currentWinner\n              : prevWinner,\n          Object.keys(winnersCount)[0]\n        );\n\n        return { game, mostFrequentWinner };\n      }\n    );\n\n    setMostFrequentWinners(mostFrequentWinnersArray);\n  };\n\n  return (\n    <div>\n      <div className=\"text\">\n        <h2>Statistics</h2>\n        {entries.length > 0 && (\n          <div>\n            <h2>Winners:</h2>\n            <ul>\n              {entries.map((entry) => (\n                <li key={entry.id}>\n                  {entry.winner} - {entry.game} - {entry.date}\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n\n        {winnerPercentages.length > 0 && (\n          <div>\n            <h2>Winners' Percentages:</h2>\n            <ul>\n              {winnerPercentages.map((item) => (\n                <li key={item.winner}>\n                  {item.winner}: {item.percentage.toFixed(2)}%\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n\n        {mostFrequentWinners.length > 0 && (\n          <div>\n            <h2>Most Frequent Winners for Each Game:</h2>\n            <ul>\n              {mostFrequentWinners.map((item) => (\n                <li key={item.game}>\n                  {item.game}: {item.mostFrequentWinner}\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}