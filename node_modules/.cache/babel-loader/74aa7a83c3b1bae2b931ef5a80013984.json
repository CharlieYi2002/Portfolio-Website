{"ast":null,"code":"// Server (LogWinnerServer.js)\nconst express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\nconst fs = require(\"fs\");\nconst app = express();\nconst PORT = 3003;\n\n// Mock database for storing entries\nlet entries = [];\napp.use(bodyParser.json());\napp.use((req, res, next) => {\n  res.header(\"Access-Control-Allow-Origin\", \"http://localhost:3000\");\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  res.header(\"Access-Control-Allow-Methods\", \"GET, POST, DELETE\"); // Include DELETE method\n  next();\n});\napp.get(\"/logWinner\", (req, res) => {\n  // Return the list of entries\n  res.status(200).json(entries);\n});\napp.post(\"/logWinner\", (req, res) => {\n  try {\n    const {\n      name,\n      date\n    } = req.body;\n\n    // Mock database entry\n    const newEntry = {\n      id: Date.now(),\n      // Generate a unique ID (for simplicity, use timestamp)\n      name: name,\n      date: date\n    };\n    entries.unshift(newEntry); // Add the new entry to the beginning of the list\n\n    console.log(\"Entry added successfully:\", newEntry);\n    res.status(201).json(newEntry);\n  } catch (error) {\n    console.error(\"Error adding entry:\", error);\n    res.status(500).json({\n      success: false,\n      message: \"Internal server error\"\n    });\n  }\n});\napp.delete(\"/logWinner/:id\", (req, res) => {\n  try {\n    const entryId = parseInt(req.params.id, 10);\n\n    // Find the index of the entry with the given ID\n    const index = entries.findIndex(entry => entry.id === entryId);\n    if (index !== -1) {\n      // Remove the entry from the list\n      const deletedEntry = entries.splice(index, 1)[0];\n      console.log(\"Entry deleted successfully:\", deletedEntry);\n      res.status(200).json({\n        success: true,\n        message: \"Entry deleted successfully\"\n      });\n    } else {\n      res.status(404).json({\n        success: false,\n        message: \"Entry not found\"\n      });\n    }\n  } catch (error) {\n    console.error(\"Error deleting entry:\", error);\n    res.status(500).json({\n      success: false,\n      message: \"Internal server error\"\n    });\n  }\n});\napp.listen(PORT, () => {\n  console.log(\"Server is running on port \".concat(PORT));\n});","map":{"version":3,"names":["express","require","bodyParser","fs","app","PORT","entries","use","json","req","res","next","header","get","status","post","name","date","body","newEntry","id","Date","now","unshift","console","log","error","success","message","delete","entryId","parseInt","params","index","findIndex","entry","deletedEntry","splice","listen","concat"],"sources":["/Users/charlieyi/Desktop/ITP_404/Final_Project/src/Log.js"],"sourcesContent":["// Server (LogWinnerServer.js)\nconst express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\nconst fs = require(\"fs\");\n\nconst app = express();\nconst PORT = 3003;\n\n// Mock database for storing entries\nlet entries = [];\n\napp.use(bodyParser.json());\napp.use((req, res, next) => {\n  res.header(\"Access-Control-Allow-Origin\", \"http://localhost:3000\");\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  res.header(\"Access-Control-Allow-Methods\", \"GET, POST, DELETE\"); // Include DELETE method\n  next();\n});\n\napp.get(\"/logWinner\", (req, res) => {\n  // Return the list of entries\n  res.status(200).json(entries);\n});\n\napp.post(\"/logWinner\", (req, res) => {\n  try {\n    const { name, date } = req.body;\n\n    // Mock database entry\n    const newEntry = {\n      id: Date.now(), // Generate a unique ID (for simplicity, use timestamp)\n      name: name,\n      date: date,\n    };\n\n    entries.unshift(newEntry); // Add the new entry to the beginning of the list\n\n    console.log(\"Entry added successfully:\", newEntry);\n\n    res.status(201).json(newEntry);\n  } catch (error) {\n    console.error(\"Error adding entry:\", error);\n    res.status(500).json({ success: false, message: \"Internal server error\" });\n  }\n});\n\napp.delete(\"/logWinner/:id\", (req, res) => {\n  try {\n    const entryId = parseInt(req.params.id, 10);\n\n    // Find the index of the entry with the given ID\n    const index = entries.findIndex((entry) => entry.id === entryId);\n\n    if (index !== -1) {\n      // Remove the entry from the list\n      const deletedEntry = entries.splice(index, 1)[0];\n      console.log(\"Entry deleted successfully:\", deletedEntry);\n\n      res.status(200).json({ success: true, message: \"Entry deleted successfully\" });\n    } else {\n      res.status(404).json({ success: false, message: \"Entry not found\" });\n    }\n  } catch (error) {\n    console.error(\"Error deleting entry:\", error);\n    res.status(500).json({ success: false, message: \"Internal server error\" });\n  }\n});\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}