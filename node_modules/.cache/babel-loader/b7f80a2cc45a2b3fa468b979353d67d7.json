{"ast":null,"code":"var _jsxFileName = \"/Users/charlieyi/Desktop/ITP_404/Final_Project/src/Statistics.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./styles.css\";\nexport default function Statistics() {\n  const [entries, setEntries] = useState([]);\n  const [winnerPercentages, setWinnerPercentages] = useState([]);\n  useEffect(() => {\n    document.title = \"Statistics\";\n  }, []);\n  useEffect(() => {\n    // fetch existing entries when the component mounts\n    fetchEntries();\n    console.log(\"Fetching existing entries in statistics\");\n  }, []);\n  useEffect(() => {\n    // recalculate percentages whenever entries change in the log changes page\n    calculateWinnerPercentages();\n    console.log(\"Updating winner percentages\");\n  }, [entries]);\n  const fetchEntries = async () => {\n    try {\n      const response = await fetch(\"http://localhost:3003/logWinner\");\n      const data = await response.json();\n      setEntries(data.reverse());\n    } catch (error) {\n      console.error(\"Error fetching entries:\", error);\n    }\n  };\n  const calculateWinnerPercentages = () => {\n    const winnerCounts = {};\n    entries.forEach(entry => {\n      winnerCounts[entry.winner] = (winnerCounts[entry.winner] || 0) + 1;\n    });\n    const totalEntries = entries.length;\n    const percentages = Object.keys(winnerCounts).map(winner => ({\n      winner,\n      percentage: winnerCounts[winner] / totalEntries * 100\n    }));\n    setWinnerPercentages(percentages);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, \"Statistics\"), entries.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 21\n    }\n  }, \"Winners:\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }\n  }, entries.map(entry => /*#__PURE__*/React.createElement(\"li\", {\n    key: entry.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 25\n    }\n  }, entry.winner, \" - \", entry.game, \" - \", entry.date))))));\n}","map":{"version":3,"names":["React","useState","useEffect","Statistics","entries","setEntries","winnerPercentages","setWinnerPercentages","document","title","fetchEntries","console","log","calculateWinnerPercentages","response","fetch","data","json","reverse","error","winnerCounts","forEach","entry","winner","totalEntries","length","percentages","Object","keys","map","percentage","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","key","id","game","date"],"sources":["/Users/charlieyi/Desktop/ITP_404/Final_Project/src/Statistics.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./styles.css\";\n\nexport default function Statistics() {\n    const [entries, setEntries] = useState([]);\n    const [winnerPercentages, setWinnerPercentages] = useState([]);\n\n    useEffect(() => {\n        document.title = \"Statistics\";\n    }, []);\n\n    useEffect(() => {\n        // fetch existing entries when the component mounts\n        fetchEntries();\n        console.log(\"Fetching existing entries in statistics\")\n    }, []);\n\n    useEffect(() => {\n        // recalculate percentages whenever entries change in the log changes page\n        calculateWinnerPercentages();\n        console.log(\"Updating winner percentages\");\n      }, [entries]);\n    \n    const fetchEntries = async () => {\n    try {\n          const response = await fetch(\"http://localhost:3003/logWinner\");\n          const data = await response.json();\n          setEntries(data.reverse());\n        } catch (error) {\n          console.error(\"Error fetching entries:\", error);\n        }\n    };\n\n    const calculateWinnerPercentages = () => {\n        const winnerCounts = {};\n        entries.forEach((entry) => {\n          winnerCounts[entry.winner] = (winnerCounts[entry.winner] || 0) + 1;\n        });\n    \n        const totalEntries = entries.length;\n    \n        const percentages = Object.keys(winnerCounts).map((winner) => ({\n          winner,\n          percentage: (winnerCounts[winner] / totalEntries) * 100,\n        }));\n    \n        setWinnerPercentages(percentages);\n      };\n\n\n    return (\n        <div>\n            <div className=\"text\">\n                <h2>Statistics</h2>\n                {entries.length > 0 && (\n                <div>\n                    <h2>Winners:</h2>\n                    <ul>\n                    {entries.map((entry) => (\n                        <li key={entry.id}>\n                        {entry.winner} - {entry.game} - {entry.date} \n                        </li>\n                    ))}\n                    </ul>\n                </div>\n                )}\n            </div>\n        </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}